{"version":3,"sources":["node_modules/browser-pack/_prelude.js","ts-dist/AnimatedParticle.js","ts-dist/Emitter.js","ts-dist/Particle.js","ts-dist/ParticleUtils.js","ts-dist/PathParticle.js","ts-dist/PropertyList.js","ts-dist/PropertyNode.js","ts-dist/particles.js","ts-dist"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiParticles","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","__extends","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","Particle_1","Texture","PIXI","AnimatedParticle","_super","emitter","_this","textures","duration","framerate","elapsed","loop","init","Particle_init","maxLife","applyArt","art","update","delta","lerp","Particle_update","frame","texture","EMPTY","destroy","Particle_destroy","parseArt","data","output","tex","outTextures","outArr","j","push","fromImage","dupe","count","default","ParticleUtils_1","PropertyNode_1","ticker","shared","PathParticle_1","helperPoint","Point","Emitter","particleParent","particleImages","config","_particleConstructor","startAlpha","startSpeed","minimumSpeedMultiplier","acceleration","maxSpeed","NaN","startScale","minimumScaleMultiplier","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","noRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","extraData","_frequency","spawnChance","maxParticles","emitterLifetime","spawnPos","spawnType","_spawnFunc","spawnRect","_spawnPath","spawnPathData","spawnInPath","spawnCircle","particlesPerWave","particleSpacing","angleStart","rotation","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","addAtBack","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","parent","recycle","rotate","updateSpawnPos","updateOwnerPos","get","set","enumerable","configurable","cleanup","particle","next","isArray","slice","partClass","alpha","createList","speed","x","y","scale","color","startRotation","min","max","rotationSpeed","lifetime","getBlendMode","blendMode","ease","generateEase","parseData","_spawnRect","Rectangle","w","h","_spawnCircle","Circle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","frequency","pos","_a","path_1","path","min_x_1","min_x","max_x_1","max_x","spawnPath","clone","emit","undefined","autoUpdate","prev","removeChild","newRot","diff","rotatePoint","resetPositionTracking","remove","add","playOnceAndDestroy","callback","playOnce","settings","TARGET_FPMS","prevX","prevY","curX","curY","Math","random","emitPosX","emitPosY","len","particleConstructor","floor","alphaList","reset","speedMultiplier","speedList","scaleMultiplier","scaleList","colorList","children","shift","pop","index","indexOf","splice","unshift","addChildAt","addChild","pathString","parsePath","verbose","console","error","randomX","getRandomInt","position","width","height","radius","angle","PropertyList_1","Sprite","Particle","anchor","velocity","age","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","Sprite_destroy","kill","current","DEG_TO_RADS","tint","combineRGBComponents","visible","interpolate","normalize","scaleBy","currentSpeed","atan2","baseTexture","warn","BLEND_MODES","ParticleUtils","PI","sin","c","cos","xnew","ynew","point","oneOverLen","sqrt","hexToRGB","charAt","substr","parseInt","segments","qty","oneOverQty","time","cp","name","NORMAL","toUpperCase","replace","createSteppedGradient","list","numSteps","first","isStepped","currentNode","nextIndex","curVal","nextVal","MATH_FUNCS","WHITELISTER","RegExp","concat","join","matches","match","Function","PathParticle","initialRotation","initialPosition","movement","isStatic","staticSet","intValueSimple","intColorSimple","intValueComplex","intColorComplex","intValueStepped","intColorStepped","PropertyList","isColor","PropertyNode","array","node","start","end","ParticleUtils_js_1","Particle_js_1","Emitter_js_1","PathParticle_js_1","AnimatedParticle_js_1","particles","prop"],"mappings":"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","file":"pixi-particles.min.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Particle_1 = require(\"./Particle\");\nvar Texture = PIXI.Texture;\n/**\n * An individual particle image with an animation. Art data passed to the emitter must be\n * formatted in a particular way for AnimatedParticle to be able to handle it:\n *\n *     {\n *         //framerate is required. It is the animation speed of the particle in frames per\n *         //second.\n *         //A value of \"matchLife\" causes the animation to match the lifetime of an individual\n *         //particle, instead of at a constant framerate. This causes the animation to play\n *         //through one time, completing when the particle expires.\n *         framerate: 6,\n *         //loop is optional, and defaults to false.\n *         loop: true,\n *         //textures is required, and can be an array of any (non-zero) length.\n *         textures: [\n *             //each entry represents a single texture that should be used for one or more\n *             //frames. Any strings will be converted to Textures with Texture.fromImage().\n *             //Instances of PIXI.Texture will be used directly.\n *             \"animFrame1.png\",\n *             //entries can be an object with a 'count' property, telling AnimatedParticle to\n *             //use that texture for 'count' frames sequentially.\n *             {\n *                 texture: \"animFrame2.png\",\n *                 count: 3\n *             },\n *             \"animFrame3.png\"\n *         ]\n *     }\n *\n * @memberof PIXI.particles\n * @class AnimatedParticle\n * @extends PIXI.particles.Particle\n * @constructor\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this AnimatedParticle.\n */\nvar AnimatedParticle = /** @class */ (function (_super) {\n    __extends(AnimatedParticle, _super);\n    function AnimatedParticle(emitter) {\n        var _this = _super.call(this, emitter) || this;\n        _this.textures = null;\n        _this.duration = 0;\n        _this.framerate = 0;\n        _this.elapsed = 0;\n        _this.loop = false;\n        return _this;\n    }\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     * @method PIXI.particles.AnimatedParticle#init\n     */\n    AnimatedParticle.prototype.init = function () {\n        this.Particle_init();\n        this.elapsed = 0;\n        //if the animation needs to match the particle's life, then cacluate variables\n        if (this.framerate < 0) {\n            this.duration = this.maxLife;\n            this.framerate = this.textures.length / this.duration;\n        }\n    };\n    /**\n     * Sets the textures for the particle.\n     * @method PIXI.particles.AnimatedParticle#applyArt\n     * @param {Array} art An array of PIXI.Texture objects for this animated particle.\n     */\n    AnimatedParticle.prototype.applyArt = function (art) {\n        this.textures = art.textures;\n        this.framerate = art.framerate;\n        this.duration = art.duration;\n        this.loop = art.loop;\n    };\n    /**\n     * Updates the particle.\n     * @method PIXI.particles.AnimatedParticle#update\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\n     */\n    AnimatedParticle.prototype.update = function (delta) {\n        var lerp = this.Particle_update(delta);\n        //only animate the particle if it is still alive\n        if (lerp >= 0) {\n            this.elapsed += delta;\n            if (this.elapsed > this.duration) {\n                //loop elapsed back around\n                if (this.loop)\n                    this.elapsed = this.elapsed % this.duration;\n                else\n                    this.elapsed = this.duration - 0.000001;\n            }\n            var frame = (this.elapsed * this.framerate + 0.0000001) | 0;\n            this.texture = this.textures[frame] || PIXI.Texture.EMPTY;\n        }\n        return lerp;\n    };\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     * @method PIXI.particles.AnimatedParticle#destroy\n     */\n    AnimatedParticle.prototype.destroy = function () {\n        this.Particle_destroy();\n        this.textures = null;\n    };\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time.\n     * @method PIXI.particles.AnimatedParticle.parseArt\n     * @static\n     * @param  {Array} art The array of art data, properly formatted for AnimatedParticle.\n     * @return {Array} The art, after any needed modifications.\n     */\n    AnimatedParticle.parseArt = function (art) {\n        var data, output, textures, tex, outTextures;\n        var outArr = [];\n        for (var i = 0; i < art.length; ++i) {\n            data = art[i];\n            outArr[i] = output = {};\n            output.textures = outTextures = [];\n            textures = data.textures;\n            for (var j = 0; j < textures.length; ++j) {\n                tex = textures[j];\n                if (typeof tex == \"string\")\n                    outTextures.push(Texture.fromImage(tex));\n                else if (tex instanceof Texture)\n                    outTextures.push(tex);\n                else {\n                    var dupe = tex.count || 1;\n                    if (typeof tex.texture == \"string\")\n                        tex = Texture.fromImage(tex.texture);\n                    else\n                        tex = tex.texture;\n                    for (; dupe > 0; --dupe) {\n                        outTextures.push(tex);\n                    }\n                }\n            }\n            //use these values to signify that the animation should match the particle life time.\n            if (data.framerate == \"matchLife\") {\n                //-1 means that it should be calculated\n                output.framerate = -1;\n                output.duration = 0;\n                output.loop = false;\n            }\n            else {\n                //determine if the animation should loop\n                output.loop = !!data.loop;\n                //get the framerate, default to 60\n                output.framerate = data.framerate > 0 ? data.framerate : 60;\n                //determine the duration\n                output.duration = outTextures.length / output.framerate;\n            }\n        }\n        return outArr;\n    };\n    return AnimatedParticle;\n}(Particle_1.default));\nexports.default = AnimatedParticle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\nvar Particle_1 = require(\"./Particle\");\nvar PropertyNode_1 = require(\"./PropertyNode\");\nvar ticker = PIXI.ticker.shared;\nvar PathParticle_1 = require(\"./PathParticle\");\nvar helperPoint = new PIXI.Point();\n/**\n * A particle emitter.\n * @memberof PIXI.particles\n * @class Emitter\n * @constructor\n * @param {PIXI.Container} particleParent The container to add the\n *                                                     particles to.\n * @param {Array|PIXI.Texture|String} [particleImages] A texture or array of textures to use\n *                                                     for the particles. Strings will be turned\n *                                                     into textures via Texture.fromImage().\n * @param {Object} [config] A configuration object containing settings for the emitter.\n * @param {Boolean} [config.emit=true] If config.emit is explicitly passed as false, the Emitter\n *                                     will start disabled.\n * @param {Boolean} [config.autoUpdate=false] If config.emit is explicitly passed as true, the Emitter\n *                                     will automatically call update via the PIXI shared ticker.\n */\nvar Emitter = /** @class */ (function () {\n    function Emitter(particleParent, particleImages, config) {\n        this._particleConstructor = Particle_1.default;\n        //properties for individual particles\n        this.particleImages = null;\n        this.startAlpha = null;\n        this.startSpeed = null;\n        this.minimumSpeedMultiplier = 1;\n        this.acceleration = null;\n        this.maxSpeed = NaN;\n        this.startScale = null;\n        this.minimumScaleMultiplier = 1;\n        this.startColor = null;\n        this.minLifetime = 0;\n        this.maxLifetime = 0;\n        this.minStartRotation = 0;\n        this.maxStartRotation = 0;\n        this.noRotation = false;\n        this.minRotationSpeed = 0;\n        this.maxRotationSpeed = 0;\n        this.particleBlendMode = 0;\n        this.customEase = null;\n        this.extraData = null;\n        //properties for spawning particles\n        this._frequency = 1;\n        this.spawnChance = 1;\n        this.maxParticles = 1000;\n        this.emitterLifetime = -1;\n        this.spawnPos = null;\n        this.spawnType = null;\n        this._spawnFunc = null;\n        this.spawnRect = null;\n        this._spawnPath = null;\n        this.spawnPathData = null;\n        this.spawnInPath = false;\n        this.spawnCircle = null;\n        this.particlesPerWave = 1;\n        this.particleSpacing = 0;\n        this.angleStart = 0;\n        //emitter properties\n        this.rotation = 0;\n        this.ownerPos = null;\n        this._prevEmitterPos = null;\n        this._prevPosIsValid = false;\n        this._posChanged = false;\n        this._parent = null;\n        this.addAtBack = false;\n        this.particleCount = 0;\n        this._emit = false;\n        this._spawnTimer = 0;\n        this._emitterLife = -1;\n        this._activeParticlesFirst = null;\n        this._activeParticlesLast = null;\n        this._poolFirst = null;\n        this._origConfig = null;\n        this._origArt = null;\n        this._autoUpdate = false;\n        this._destroyWhenComplete = false;\n        this._completeCallback = null;\n        //set the initial parent\n        this.parent = particleParent;\n        if (particleImages && config)\n            this.init(particleImages, config);\n        //save often used functions on the instance instead of the prototype for better speed\n        this.recycle = this.recycle;\n        this.update = this.update;\n        this.rotate = this.rotate;\n        this.updateSpawnPos = this.updateSpawnPos;\n        this.updateOwnerPos = this.updateOwnerPos;\n    }\n    Object.defineProperty(Emitter.prototype, \"frequency\", {\n        /**\n         * Time between particle spawns in seconds. If this value is not a number greater than 0,\n         * it will be set to 1 (particle per second) to prevent infinite loops.\n         * @member {Number} PIXI.particles.Emitter#frequency\n         */\n        get: function () { return this._frequency; },\n        set: function (value) {\n            //do some error checking to prevent infinite loops\n            if (typeof value == \"number\" && value > 0)\n                this._frequency = value;\n            else\n                this._frequency = 1;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Emitter.prototype, \"particleConstructor\", {\n        /**\n         * The constructor used to create new particles. The default is\n         * the built in Particle class. Setting this will dump any active or\n         * pooled particles, if the emitter has already been used.\n         * @member {Function} PIXI.particles.Emitter#particleConstructor\n         */\n        get: function () { return this._particleConstructor; },\n        set: function (value) {\n            if (value != this._particleConstructor) {\n                this._particleConstructor = value;\n                //clean up existing particles\n                this.cleanup();\n                //scrap all the particles\n                for (var particle = this._poolFirst; particle; particle = particle.next) {\n                    particle.destroy();\n                }\n                this._poolFirst = null;\n                //re-initialize the emitter so that the new constructor can do anything it needs to\n                if (this._origConfig && this._origArt)\n                    this.init(this._origArt, this._origConfig);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Emitter.prototype, \"parent\", {\n        /**\n         * The container to add particles to. Settings this will dump any active particles.\n         * @member {PIXI.Container} PIXI.particles.Emitter#parent\n         */\n        get: function () { return this._parent; },\n        set: function (value) {\n            this.cleanup();\n            this._parent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets up the emitter based on the config settings.\n     * @method PIXI.particles.Emitter#init\n     * @param {Array|PIXI.Texture} art A texture or array of textures to use for the particles.\n     * @param {Object} config A configuration object containing settings for the emitter.\n     */\n    Emitter.prototype.init = function (art, config) {\n        var _this = this;\n        if (!art || !config)\n            return;\n        //clean up any existing particles\n        this.cleanup();\n        //store the original config and particle images, in case we need to re-initialize\n        //when the particle constructor is changed\n        this._origConfig = config;\n        this._origArt = art;\n        //set up the array of data, also ensuring that it is an array\n        art = Array.isArray(art) ? art.slice() : [art];\n        //run the art through the particle class's parsing function\n        var partClass = this._particleConstructor;\n        this.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\n        ///////////////////////////\n        // Particle Properties   //\n        ///////////////////////////\n        //set up the alpha\n        if (config.alpha) {\n            this.startAlpha = PropertyNode_1.default.createList(config.alpha);\n        }\n        else\n            this.startAlpha = new PropertyNode_1.default(1, 0);\n        //set up the speed\n        if (config.speed) {\n            this.startSpeed = PropertyNode_1.default.createList(config.speed);\n            this.minimumSpeedMultiplier = config.speed.minimumSpeedMultiplier || 1;\n        }\n        else {\n            this.minimumSpeedMultiplier = 1;\n            this.startSpeed = new PropertyNode_1.default(0, 0);\n        }\n        //set up acceleration\n        var acceleration = config.acceleration;\n        if (acceleration && (acceleration.x || acceleration.y)) {\n            //make sure we disable speed interpolation\n            this.startSpeed.next = null;\n            this.acceleration = new PIXI.Point(acceleration.x, acceleration.y);\n            this.maxSpeed = config.maxSpeed || NaN;\n        }\n        else\n            this.acceleration = new PIXI.Point();\n        //set up the scale\n        if (config.scale) {\n            this.startScale = PropertyNode_1.default.createList(config.scale);\n            this.minimumScaleMultiplier = config.scale.minimumScaleMultiplier || 1;\n        }\n        else {\n            this.startScale = new PropertyNode_1.default(1, 0);\n            this.minimumScaleMultiplier = 1;\n        }\n        //set up the color\n        if (config.color) {\n            this.startColor = PropertyNode_1.default.createList(config.color);\n        }\n        else {\n            this.startColor = new PropertyNode_1.default({ r: 0xFF, g: 0xFF, b: 0xFF }, 0);\n        }\n        //set up the start rotation\n        if (config.startRotation) {\n            this.minStartRotation = config.startRotation.min;\n            this.maxStartRotation = config.startRotation.max;\n        }\n        else\n            this.minStartRotation = this.maxStartRotation = 0;\n        if (config.noRotation &&\n            (this.minStartRotation || this.maxStartRotation)) {\n            this.noRotation = !!config.noRotation;\n        }\n        else\n            this.noRotation = false;\n        //set up the rotation speed\n        if (config.rotationSpeed) {\n            this.minRotationSpeed = config.rotationSpeed.min;\n            this.maxRotationSpeed = config.rotationSpeed.max;\n        }\n        else\n            this.minRotationSpeed = this.maxRotationSpeed = 0;\n        //set up the lifetime\n        this.minLifetime = config.lifetime.min;\n        this.maxLifetime = config.lifetime.max;\n        //get the blend mode\n        this.particleBlendMode = ParticleUtils_1.default.getBlendMode(config.blendMode);\n        //use the custom ease if provided\n        if (config.ease) {\n            this.customEase = typeof config.ease == \"function\" ?\n                config.ease :\n                ParticleUtils_1.default.generateEase(config.ease);\n        }\n        else\n            this.customEase = null;\n        //set up the extra data, running it through the particle class's parseData function.\n        if (partClass.parseData)\n            this.extraData = partClass.parseData(config.extraData);\n        else\n            this.extraData = config.extraData || null;\n        //////////////////////////\n        // Emitter Properties   //\n        //////////////////////////\n        //reset spawn type specific settings\n        this.spawnPathData = null;\n        this.spawnRect = this.spawnCircle = null;\n        this.particlesPerWave = 1;\n        if (config.particlesPerWave && config.particlesPerWave > 1)\n            this.particlesPerWave = config.particlesPerWave;\n        this.particleSpacing = 0;\n        this.angleStart = 0;\n        var spawnCircle;\n        //determine the spawn function to use\n        switch (config.spawnType) {\n            case \"rect\":\n                this.spawnType = \"rect\";\n                this._spawnFunc = this._spawnRect;\n                var spawnRect = config.spawnRect;\n                this.spawnRect = new PIXI.Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\n                break;\n            case \"circle\":\n                this.spawnType = \"circle\";\n                this._spawnFunc = this._spawnCircle;\n                spawnCircle = config.spawnCircle;\n                this.spawnCircle = new PIXI.Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r);\n                break;\n            case \"ring\":\n                this.spawnType = \"ring\";\n                this._spawnFunc = this._spawnRing;\n                spawnCircle = config.spawnCircle;\n                this.spawnCircle = new PIXI.Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r);\n                this.spawnCircle.minRadius = spawnCircle.minR;\n                break;\n            case \"burst\":\n                this.spawnType = \"burst\";\n                this._spawnFunc = this._spawnBurst;\n                this.particleSpacing = config.particleSpacing;\n                this.angleStart = config.angleStart ? config.angleStart : 0;\n                break;\n            case \"point\":\n                this.spawnType = \"point\";\n                this._spawnFunc = this._spawnPoint;\n                break;\n            default:\n                this.spawnType = \"point\";\n                this._spawnFunc = this._spawnPoint;\n                break;\n        }\n        //set the spawning frequency\n        this.frequency = config.frequency;\n        this.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\n        //set the emitter lifetime\n        this.emitterLifetime = config.emitterLifetime || -1;\n        //set the max particles\n        this.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\n        //determine if we should add the particle at the back of the list or not\n        this.addAtBack = !!config.addAtBack;\n        //reset the emitter position and rotation variables\n        this.rotation = 0;\n        this.ownerPos = new PIXI.Point();\n        this.spawnPos = new PIXI.Point(config.pos.x, config.pos.y);\n        // if we passed in spawnPath this is when we execute the function to reposition the spawnPos\n        // before running spawnFunc each time.\n        if (config.spawnPathData) {\n            var _a = config.spawnPathData, path_1 = _a.path, min_x_1 = _a.min_x, max_x_1 = _a.max_x;\n            this.spawnInPath = true;\n            this._spawnPath = (function () {\n                _this.spawnPath(path_1, min_x_1, max_x_1);\n                _this.updateOwnerPos(config.pos.x, config.pos.y);\n            });\n        }\n        this._prevEmitterPos = this.spawnPos.clone();\n        //previous emitter position is invalid and should not be used for interpolation\n        this._prevPosIsValid = false;\n        //start emitting\n        this._spawnTimer = 0;\n        this.emit = config.emit === undefined ? true : !!config.emit;\n        this.autoUpdate = config.autoUpdate === undefined ? false : !!config.autoUpdate;\n    };\n    /**\n     * Recycles an individual particle.\n     * @method PIXI.particles.Emitter#recycle\n     * @param {Particle} particle The particle to recycle.\n     * @private\n     */\n    Emitter.prototype.recycle = function (particle) {\n        if (particle.next)\n            particle.next.prev = particle.prev;\n        if (particle.prev)\n            particle.prev.next = particle.next;\n        if (particle == this._activeParticlesLast)\n            this._activeParticlesLast = particle.prev;\n        if (particle == this._activeParticlesFirst)\n            this._activeParticlesFirst = particle.next;\n        //add to pool\n        particle.prev = null;\n        particle.next = this._poolFirst;\n        this._poolFirst = particle;\n        //remove child from display, or make it invisible if it is in a ParticleContainer\n        if (particle.parent)\n            particle.parent.removeChild(particle);\n        //decrease count\n        --this.particleCount;\n    };\n    /**\n     * Sets the rotation of the emitter to a new value.\n     * @method PIXI.particles.Emitter#rotate\n     * @param {Number} newRot The new rotation, in degrees.\n     */\n    Emitter.prototype.rotate = function (newRot) {\n        if (this.rotation == newRot)\n            return;\n        //caclulate the difference in rotation for rotating spawnPos\n        var diff = newRot - this.rotation;\n        this.rotation = newRot;\n        //rotate spawnPos\n        ParticleUtils_1.default.rotatePoint(diff, this.spawnPos);\n        //mark the position as having changed\n        this._posChanged = true;\n    };\n    /**\n     * Changes the spawn position of the emitter.\n     * @method PIXI.particles.Emitter#updateSpawnPos\n     * @param {Number} x The new x value of the spawn position for the emitter.\n     * @param {Number} y The new y value of the spawn position for the emitter.\n     */\n    Emitter.prototype.updateSpawnPos = function (x, y) {\n        this._posChanged = true;\n        this.spawnPos.x = x;\n        this.spawnPos.y = y;\n    };\n    /**\n     * Changes the position of the emitter's owner. You should call this if you are adding\n     * particles to the world container that your emitter's owner is moving around in.\n     * @method PIXI.particles.Emitter#updateOwnerPos\n     * @param {Number} x The new x value of the emitter's owner.\n     * @param {Number} y The new y value of the emitter's owner.\n     */\n    Emitter.prototype.updateOwnerPos = function (x, y) {\n        this._posChanged = true;\n        this.ownerPos.x = x;\n        this.ownerPos.y = y;\n    };\n    /**\n     * Prevents emitter position interpolation in the next update.\n     * This should be used if you made a major position change of your emitter's owner\n     * that was not normal movement.\n     * @method PIXI.particles.Emitter#resetPositionTracking\n     */\n    Emitter.prototype.resetPositionTracking = function () {\n        this._prevPosIsValid = false;\n    };\n    Object.defineProperty(Emitter.prototype, \"emit\", {\n        /**\n         * If particles should be emitted during update() calls. Setting this to false\n         * stops new particles from being created, but allows existing ones to die out.\n         * @member {Boolean} PIXI.particles.Emitter#emit\n         */\n        get: function () { return this._emit; },\n        set: function (value) {\n            this._emit = !!value;\n            this._emitterLife = this.emitterLifetime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    Object.defineProperty(Emitter.prototype, \"autoUpdate\", {\n        /**\n         * If the update function is called automatically from the shared ticker.\n         * Setting this to false requires calling the update function manually.\n         * @member {Boolean} PIXI.particles.Emitter#autoUpdate\n         */\n        get: function () { return this._autoUpdate; },\n        set: function (value) {\n            if (this._autoUpdate && !value) {\n                ticker.remove(this.update, this);\n            }\n            else if (!this._autoUpdate && value) {\n                ticker.add(this.update, this);\n            }\n            this._autoUpdate = !!value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\n     * when particle emission is complete.\n     * @method PIXI.particles.Emitter#playOnceAndDestroy\n     * @param {Function} [callback] Callback for when emission is complete (all particles have died off)\n     */\n    Emitter.prototype.playOnceAndDestroy = function (callback) {\n        this.autoUpdate = true;\n        this.emit = true;\n        this._destroyWhenComplete = true;\n        this._completeCallback = callback;\n    };\n    /**\n     * Starts emitting particles and optionally calls a callback when particle emission is complete.\n     * @method PIXI.particles.Emitter#playOnce\n     * @param {Function} [callback] Callback for when emission is complete (all particles have died off)\n     */\n    Emitter.prototype.playOnce = function (callback) {\n        this.emit = true;\n        this._completeCallback = callback;\n    };\n    /**\n     * Updates all particles spawned by this emitter and emits new ones.\n     * @method PIXI.particles.Emitter#update\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\n     */\n    Emitter.prototype.update = function (delta) {\n        if (this._autoUpdate) {\n            delta = delta / PIXI.settings.TARGET_FPMS / 1000;\n        }\n        //if we don't have a parent to add particles to, then don't do anything.\n        //this also works as a isDestroyed check\n        if (!this._parent)\n            return;\n        //update existing particles\n        var i, particle, next;\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\n            next = particle.next;\n            particle.update(delta);\n        }\n        var prevX, prevY;\n        //if the previous position is valid, store these for later interpolation\n        if (this._prevPosIsValid) {\n            prevX = this._prevEmitterPos.x;\n            prevY = this._prevEmitterPos.y;\n        }\n        if (this.spawnInPath) {\n            this._spawnPath();\n        }\n        //store current position of the emitter as local variables\n        var curX = this.ownerPos.x + this.spawnPos.x;\n        var curY = this.ownerPos.y + this.spawnPos.y;\n        //spawn new particles\n        if (this._emit) {\n            //decrease spawn timer\n            this._spawnTimer -= delta < 0 ? 0 : delta;\n            //while _spawnTimer < 0, we have particles to spawn\n            while (this._spawnTimer <= 0) {\n                //determine if the emitter should stop spawning\n                if (this._emitterLife > 0) {\n                    this._emitterLife -= this._frequency;\n                    if (this._emitterLife <= 0) {\n                        this._spawnTimer = 0;\n                        this._emitterLife = 0;\n                        this.emit = false;\n                        break;\n                    }\n                }\n                //determine if we have hit the particle limit\n                if (this.particleCount >= this.maxParticles) {\n                    this._spawnTimer += this._frequency;\n                    continue;\n                }\n                //determine the particle lifetime\n                var lifetime = void 0;\n                if (this.minLifetime == this.maxLifetime)\n                    lifetime = this.minLifetime;\n                else\n                    lifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\n                //only make the particle if it wouldn't immediately destroy itself\n                if (-this._spawnTimer < lifetime) {\n                    //If the position has changed and this isn't the first spawn,\n                    //interpolate the spawn position\n                    var emitPosX = void 0, emitPosY = void 0;\n                    if (this._prevPosIsValid && this._posChanged) {\n                        //1 - _spawnTimer / delta, but _spawnTimer is negative\n                        var lerp = 1 + this._spawnTimer / delta;\n                        emitPosX = (curX - prevX) * lerp + prevX;\n                        emitPosY = (curY - prevY) * lerp + prevY;\n                    }\n                    else {\n                        emitPosX = curX;\n                        emitPosY = curY;\n                    }\n                    //create enough particles to fill the wave (non-burst types have a wave of 1)\n                    i = 0;\n                    for (var len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i) {\n                        //see if we actually spawn one\n                        if (this.spawnChance < 1 && Math.random() >= this.spawnChance)\n                            continue;\n                        //create particle\n                        var p = void 0;\n                        if (this._poolFirst) {\n                            p = this._poolFirst;\n                            this._poolFirst = this._poolFirst.next;\n                            p.next = null;\n                        }\n                        else {\n                            p = new this.particleConstructor(this);\n                        }\n                        //set a random texture if we have more than one\n                        if (this.particleImages.length > 1) {\n                            p.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\n                        }\n                        else {\n                            //if they are actually the same texture, a standard particle\n                            //will quit early from the texture setting in setTexture().\n                            p.applyArt(this.particleImages[0]);\n                        }\n                        //set up the start and end values\n                        p.alphaList.reset(this.startAlpha);\n                        if (this.minimumSpeedMultiplier != 1) {\n                            p.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\n                        }\n                        p.speedList.reset(this.startSpeed);\n                        p.acceleration.x = this.acceleration.x;\n                        p.acceleration.y = this.acceleration.y;\n                        p.maxSpeed = this.maxSpeed;\n                        if (this.minimumScaleMultiplier != 1) {\n                            p.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\n                        }\n                        p.scaleList.reset(this.startScale);\n                        p.colorList.reset(this.startColor);\n                        //randomize the rotation speed\n                        if (this.minRotationSpeed == this.maxRotationSpeed)\n                            p.rotationSpeed = this.minRotationSpeed;\n                        else\n                            p.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\n                        p.noRotation = this.noRotation;\n                        //set up the lifetime\n                        p.maxLife = lifetime;\n                        //set the blend mode\n                        p.blendMode = this.particleBlendMode;\n                        //set the custom ease, if any\n                        p.ease = this.customEase;\n                        //set the extra data, if any\n                        p.extraData = this.extraData;\n                        //call the proper function to handle rotation and position of particle\n                        this._spawnFunc(p, emitPosX, emitPosY, i);\n                        //initialize particle\n                        p.init();\n                        //update the particle by the time passed, so the particles are spread out properly\n                        p.update(-this._spawnTimer); //we want a positive delta, because a negative delta messes things up\n                        //add the particle to the display list\n                        if (!p.parent) {\n                            if (this.addAtBack)\n                                this._parent.addChildAt(p, 0);\n                            else\n                                this._parent.addChild(p);\n                        }\n                        else {\n                            //kind of hacky, but performance friendly\n                            //shuffle children to correct place\n                            var children = this._parent.children;\n                            //avoid using splice if possible\n                            if (children[0] == p)\n                                children.shift();\n                            else if (children[children.length - 1] == p)\n                                children.pop();\n                            else {\n                                var index = children.indexOf(p);\n                                children.splice(index, 1);\n                            }\n                            if (this.addAtBack)\n                                children.unshift(p);\n                            else\n                                children.push(p);\n                        }\n                        //add particle to list of active particles\n                        if (this._activeParticlesLast) {\n                            this._activeParticlesLast.next = p;\n                            p.prev = this._activeParticlesLast;\n                            this._activeParticlesLast = p;\n                        }\n                        else {\n                            this._activeParticlesLast = this._activeParticlesFirst = p;\n                        }\n                        ++this.particleCount;\n                    }\n                }\n                //increase timer and continue on to any other particles that need to be created\n                this._spawnTimer += this._frequency;\n            }\n        }\n        //if the position changed before this update, then keep track of that\n        if (this._posChanged) {\n            this._prevEmitterPos.x = curX;\n            this._prevEmitterPos.y = curY;\n            this._prevPosIsValid = true;\n            this._posChanged = false;\n        }\n        //if we are all done and should destroy ourselves, take care of that\n        if (!this._emit && !this._activeParticlesFirst) {\n            if (this._completeCallback) {\n                this._completeCallback();\n            }\n            if (this._destroyWhenComplete) {\n                this.destroy();\n            }\n        }\n    };\n    /**\n     * Changes spawn position of a particle based on somewhere within a path passed into config\n     * @method PIXI.particles.Emitter#spawnPath\n     * @private\n     * @param {String} pathString The string to parse.\n     * @param {Number} min_x min value for the path's x to solve for y\n     * @param {Number} max_x max value for the path's x to solve for y\n     */\n    Emitter.prototype.spawnPath = function (pathString, min_x, max_x) {\n        var path;\n        try {\n            path = PathParticle_1.parsePath(pathString);\n        }\n        catch (e) {\n            if (ParticleUtils_1.default.verbose)\n                console.error(\"PathParticle: error in parsing path expression\");\n            return null;\n        }\n        var randomX = ParticleUtils_1.default.getRandomInt(min_x, max_x);\n        helperPoint.x = randomX;\n        helperPoint.y = path(randomX);\n        ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\n        this.updateSpawnPos(helperPoint.x, helperPoint.y);\n    };\n    /**\n     * Positions a particle for a point type emitter.\n     * @method PIXI.particles.Emitter#_spawnPoint\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave. Not used for this function.\n     */\n    Emitter.prototype._spawnPoint = function (p, emitPosX, emitPosY) {\n        //set the initial rotation/direction of the particle based on\n        //starting particle angle and rotation of emitter\n        if (this.minStartRotation == this.maxStartRotation)\n            p.rotation = this.minStartRotation + this.rotation;\n        else\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n        //drop the particle at the emitter's position\n        p.position.x = emitPosX;\n        p.position.y = emitPosY;\n    };\n    /**\n     * Positions a particle for a rectangle type emitter.\n     * @method PIXI.particles.Emitter#_spawnRect\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave. Not used for this function.\n     */\n    Emitter.prototype._spawnRect = function (p, emitPosX, emitPosY) {\n        //set the initial rotation/direction of the particle based on starting\n        //particle angle and rotation of emitter\n        if (this.minStartRotation == this.maxStartRotation)\n            p.rotation = this.minStartRotation + this.rotation;\n        else\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n        //place the particle at a random point in the rectangle\n        helperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\n        helperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\n        if (this.rotation !== 0)\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    };\n    /**\n     * Positions a particle for a circle type emitter.\n     * @method PIXI.particles.Emitter#_spawnCircle\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave. Not used for this function.\n     */\n    Emitter.prototype._spawnCircle = function (p, emitPosX, emitPosY) {\n        //set the initial rotation/direction of the particle based on starting\n        //particle angle and rotation of emitter\n        if (this.minStartRotation == this.maxStartRotation)\n            p.rotation = this.minStartRotation + this.rotation;\n        else\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n                this.minStartRotation + this.rotation;\n        //place the particle at a random radius in the circle\n        helperPoint.x = Math.random() * this.spawnCircle.radius;\n        helperPoint.y = 0;\n        //rotate the point to a random angle in the circle\n        ParticleUtils_1.default.rotatePoint(Math.random() * 360, helperPoint);\n        //offset by the circle's center\n        helperPoint.x += this.spawnCircle.x;\n        helperPoint.y += this.spawnCircle.y;\n        //rotate the point by the emitter's rotation\n        if (this.rotation !== 0)\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\n        //set the position, offset by the emitter's position\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    };\n    /**\n     * Positions a particle for a ring type emitter.\n     * @method PIXI.particles.Emitter#_spawnRing\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave. Not used for this function.\n     */\n    Emitter.prototype._spawnRing = function (p, emitPosX, emitPosY) {\n        var spawnCircle = this.spawnCircle;\n        //set the initial rotation/direction of the particle based on starting\n        //particle angle and rotation of emitter\n        if (this.minStartRotation == this.maxStartRotation)\n            p.rotation = this.minStartRotation + this.rotation;\n        else\n            p.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n                this.minStartRotation + this.rotation;\n        //place the particle at a random radius in the ring\n        if (spawnCircle.minRadius !== spawnCircle.radius) {\n            helperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\n                spawnCircle.minRadius;\n        }\n        else\n            helperPoint.x = spawnCircle.radius;\n        helperPoint.y = 0;\n        //rotate the point to a random angle in the circle\n        var angle = Math.random() * 360;\n        p.rotation += angle;\n        ParticleUtils_1.default.rotatePoint(angle, helperPoint);\n        //offset by the circle's center\n        helperPoint.x += this.spawnCircle.x;\n        helperPoint.y += this.spawnCircle.y;\n        //rotate the point by the emitter's rotation\n        if (this.rotation !== 0)\n            ParticleUtils_1.default.rotatePoint(this.rotation, helperPoint);\n        //set the position, offset by the emitter's position\n        p.position.x = emitPosX + helperPoint.x;\n        p.position.y = emitPosY + helperPoint.y;\n    };\n    /**\n     * Positions a particle for a burst type emitter.\n     * @method PIXI.particles.Emitter#_spawnBurst\n     * @private\n     * @param {Particle} p The particle to position and rotate.\n     * @param {Number} emitPosX The emitter's x position\n     * @param {Number} emitPosY The emitter's y position\n     * @param {int} i The particle number in the current wave.\n     */\n    Emitter.prototype._spawnBurst = function (p, emitPosX, emitPosY, i) {\n        //set the initial rotation/direction of the particle based on spawn\n        //angle and rotation of emitter\n        if (this.particleSpacing === 0)\n            p.rotation = Math.random() * 360;\n        else\n            p.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\n        //drop the particle at the emitter's position\n        p.position.x = emitPosX;\n        p.position.y = emitPosY;\n    };\n    /**\n     * Kills all active particles immediately.\n     * @method PIXI.particles.Emitter#cleanup\n     */\n    Emitter.prototype.cleanup = function () {\n        var particle, next;\n        for (particle = this._activeParticlesFirst; particle; particle = next) {\n            next = particle.next;\n            this.recycle(particle);\n            if (particle.parent)\n                particle.parent.removeChild(particle);\n        }\n        this._activeParticlesFirst = this._activeParticlesLast = null;\n        this.particleCount = 0;\n    };\n    /**\n     * Destroys the emitter and all of its particles.\n     * @method PIXI.particles.Emitter#destroy\n     */\n    Emitter.prototype.destroy = function () {\n        //make sure we aren't still listening to any tickers\n        this.autoUpdate = false;\n        //puts all active particles in the pool, and removes them from the particle parent\n        this.cleanup();\n        //wipe the pool clean\n        var next;\n        for (var particle = this._poolFirst; particle; particle = next) {\n            //store next value so we don't lose it in our destroy call\n            next = particle.next;\n            particle.destroy();\n        }\n        this._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\n            this.startColor = this.startScale = this.startAlpha = this.startSpeed =\n                this.customEase = this._completeCallback = null;\n    };\n    return Emitter;\n}());\nexports.default = Emitter;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\nvar PropertyList_1 = require(\"./PropertyList\");\nvar Sprite = PIXI.Sprite;\n/**\n * An individual particle image. You shouldn't have to deal with these.\n * @memberof PIXI.particles\n * @class Particle\n * @extends PIXI.Sprite\n * @constructor\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\n */\nvar Particle = /** @class */ (function (_super) {\n    __extends(Particle, _super);\n    function Particle(emitter) {\n        var _this = \n        //start off the sprite with a blank texture, since we are going to replace it\n        //later when the particle is initialized.\n        _super.call(this) || this;\n        _this.emitter = emitter;\n        //particles should be centered\n        _this.anchor.x = _this.anchor.y = 0.5;\n        _this.velocity = new PIXI.Point();\n        _this.maxLife = 0;\n        _this.age = 0;\n        _this.ease = null;\n        _this.extraData = null;\n        _this.alphaList = new PropertyList_1.default();\n        _this.speedList = new PropertyList_1.default();\n        _this.speedMultiplier = 1;\n        /**\n         * Acceleration to apply to the particle.\n         * @property {PIXI.Point} accleration\n         */\n        _this.acceleration = new PIXI.Point();\n        /**\n         * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n         * will disable the maximum speed.\n         * @property {Number} maxSpeed\n         * @default NaN\n         */\n        _this.maxSpeed = NaN;\n        /**\n         * The scale of the particle throughout its life.\n         * @property {PIXI.particles.PropertyList} scaleList\n         */\n        _this.scaleList = new PropertyList_1.default();\n        /**\n         * A multiplier from 0-1 applied to the scale of the particle at all times.\n         * @property {number} scaleMultiplier\n         */\n        _this.scaleMultiplier = 1;\n        /**\n         * The tint of the particle throughout its life.\n         * @property {PIXI.particles.PropertyList} colorList\n         */\n        _this.colorList = new PropertyList_1.default(true);\n        /**\n         * If alpha should be interpolated at all.\n         * @property {Boolean} _doAlpha\n         * @private\n         */\n        _this._doAlpha = false;\n        /**\n         * If scale should be interpolated at all.\n         * @property {Boolean} _doScale\n         * @private\n         */\n        _this._doScale = false;\n        /**\n         * If speed should be interpolated at all.\n         * @property {Boolean} _doSpeed\n         * @private\n         */\n        _this._doSpeed = false;\n        /**\n         * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\n         * and _doSpeed gets priority.\n         * @property {Boolean} _doAcceleration\n         * @private\n         */\n        _this._doAcceleration = false;\n        /**\n         * If color should be interpolated at all.\n         * @property {Boolean} _doColor\n         * @private\n         */\n        _this._doColor = false;\n        /**\n         * If normal movement should be handled. Subclasses wishing to override movement\n         * can set this to false in init().\n         * @property {Boolean} _doNormalMovement\n         * @private\n         */\n        _this._doNormalMovement = false;\n        /**\n         * One divided by the max life of the particle, saved for slightly faster math.\n         * @property {Number} _oneOverLife\n         * @private\n         */\n        _this._oneOverLife = 0;\n        /**\n         * Reference to the next particle in the list.\n         * @property {Particle} next\n         * @private\n         */\n        _this.next = null;\n        /**\n         * Reference to the previous particle in the list.\n         * @property {Particle} prev\n         * @private\n         */\n        _this.prev = null;\n        //save often used functions on the instance instead of the prototype for better speed\n        _this.init = _this.init;\n        _this.Particle_init = Particle.prototype.init;\n        _this.update = _this.update;\n        _this.Particle_update = Particle.prototype.update;\n        _this.Sprite_destroy = _super.prototype.destroy;\n        _this.Particle_destroy = Particle.prototype.destroy;\n        _this.applyArt = _this.applyArt;\n        _this.kill = _this.kill;\n        return _this;\n    }\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     * @method PIXI.particles.Particle#init\n     */\n    Particle.prototype.init = function () {\n        //reset the age\n        this.age = 0;\n        //set up the velocity based on the start speed and rotation\n        this.velocity.x = this.speedList.current.value * this.speedMultiplier;\n        this.velocity.y = 0;\n        ParticleUtils_1.default.rotatePoint(this.rotation, this.velocity);\n        if (this.noRotation) {\n            this.rotation = 0;\n        }\n        else {\n            //convert rotation to Radians from Degrees\n            this.rotation *= ParticleUtils_1.default.DEG_TO_RADS;\n        }\n        //convert rotation speed to Radians from Degrees\n        this.rotationSpeed *= ParticleUtils_1.default.DEG_TO_RADS;\n        //set alpha to inital alpha\n        this.alpha = this.alphaList.current.value;\n        //set scale to initial scale\n        this.scale.x = this.scale.y = this.scaleList.current.value;\n        //figure out what we need to interpolate\n        this._doAlpha = !!this.alphaList.current.next;\n        this._doSpeed = !!this.speedList.current.next;\n        this._doScale = !!this.scaleList.current.next;\n        this._doColor = !!this.colorList.current.next;\n        this._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\n        //_doNormalMovement can be cancelled by subclasses\n        this._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\n        //save our lerp helper\n        this._oneOverLife = 1 / this.maxLife;\n        //set the inital color\n        var color = this.colorList.current.value;\n        this.tint = ParticleUtils_1.default.combineRGBComponents(color.r, color.g, color.b);\n        //ensure visibility\n        this.visible = true;\n    };\n    /**\n     * Sets the texture for the particle. This can be overridden to allow\n     * for an animated particle.\n     * @method PIXI.particles.Particle#applyArt\n     * @param {PIXI.Texture} art The texture to set.\n     */\n    Particle.prototype.applyArt = function (art) {\n        this.texture = art || PIXI.Texture.EMPTY;\n    };\n    /**\n     * Updates the particle.\n     * @method PIXI.particles.Particle#update\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\n     * @return {Number} The standard interpolation multiplier (0-1) used for all relevant particle\n     *                   properties. A value of -1 means the particle died of old age instead.\n     */\n    Particle.prototype.update = function (delta) {\n        //increase age\n        this.age += delta;\n        //recycle particle if it is too old\n        if (this.age >= this.maxLife || this.age < 0) {\n            this.kill();\n            return -1;\n        }\n        //determine our interpolation value\n        var lerp = this.age * this._oneOverLife; //lifetime / maxLife;\n        if (this.ease) {\n            if (this.ease.length == 4) {\n                //the t, b, c, d parameters that some tween libraries use\n                //(time, initial value, end value, duration)\n                lerp = this.ease(lerp, 0, 1, 1);\n            }\n            else {\n                //the simplified version that we like that takes\n                //one parameter, time from 0-1. TweenJS eases provide this usage.\n                lerp = this.ease(lerp);\n            }\n        }\n        //interpolate alpha\n        if (this._doAlpha)\n            this.alpha = this.alphaList.interpolate(lerp);\n        //interpolate scale\n        if (this._doScale) {\n            var scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\n            this.scale.x = this.scale.y = scale;\n        }\n        //handle movement\n        if (this._doNormalMovement) {\n            //interpolate speed\n            if (this._doSpeed) {\n                var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n                ParticleUtils_1.default.normalize(this.velocity);\n                ParticleUtils_1.default.scaleBy(this.velocity, speed);\n            }\n            else if (this._doAcceleration) {\n                this.velocity.x += this.acceleration.x * delta;\n                this.velocity.y += this.acceleration.y * delta;\n                if (this.maxSpeed) {\n                    var currentSpeed = ParticleUtils_1.default.length(this.velocity);\n                    //if we are going faster than we should, clamp at the max speed\n                    //DO NOT recalculate vector length\n                    if (currentSpeed > this.maxSpeed) {\n                        ParticleUtils_1.default.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\n                    }\n                }\n            }\n            //adjust position based on velocity\n            this.position.x += this.velocity.x * delta;\n            this.position.y += this.velocity.y * delta;\n        }\n        //interpolate color\n        if (this._doColor) {\n            this.tint = this.colorList.interpolate(lerp);\n        }\n        //update rotation\n        if (this.rotationSpeed !== 0) {\n            this.rotation += this.rotationSpeed * delta;\n        }\n        else if (this.acceleration && !this.noRotation) {\n            this.rotation = Math.atan2(this.velocity.y, this.velocity.x); // + Math.PI / 2;\n        }\n        return lerp;\n    };\n    /**\n     * Kills the particle, removing it from the display list\n     * and telling the emitter to recycle it.\n     * @method PIXI.particles.Particle#kill\n     */\n    Particle.prototype.kill = function () {\n        this.emitter.recycle(this);\n    };\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     * @method PIXI.particles.Particle#destroy\n     */\n    Particle.prototype.destroy = function () {\n        if (this.parent)\n            this.parent.removeChild(this);\n        this.Sprite_destroy();\n        this.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\n            this.speedList = this.ease = this.next = this.prev = null;\n    };\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time.\n     * @method PIXI.particles.Particle.parseArt\n     * @static\n     * @param  {Array} art The array of art data. For Particle, it should be an array of Textures.\n     *                     Any strings in the array will be converted to Textures via\n     *                     Texture.fromImage().\n     * @return {Array} The art, after any needed modifications.\n     */\n    Particle.parseArt = function (art) {\n        //convert any strings to Textures.\n        var i;\n        for (i = art.length; i >= 0; --i) {\n            if (typeof art[i] == \"string\")\n                art[i] = PIXI.Texture.fromImage(art[i]);\n        }\n        //particles from different base textures will be slower in WebGL than if they\n        //were from one spritesheet\n        if (ParticleUtils_1.default.verbose) {\n            for (i = art.length - 1; i > 0; --i) {\n                if (art[i].baseTexture != art[i - 1].baseTexture) {\n                    if (window.console)\n                        console.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\n                    break;\n                }\n            }\n        }\n        return art;\n    };\n    /**\n     * Parses extra emitter data to ensure it is set up for this particle class.\n     * Particle does nothing to the extra data.\n     * @method PIXI.particles.Particle.parseData\n     * @static\n     * @param  {Object} extraData The extra data from the particle config.\n     * @return {Object} The parsed extra data.\n     */\n    Particle.parseData = function (extraData) {\n        return extraData;\n    };\n    return Particle;\n}(Sprite));\nexports.default = Particle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BLEND_MODES = PIXI.BLEND_MODES;\nvar PropertyNode_1 = require(\"./PropertyNode\");\n/**\n * Contains helper functions for particles and emitters to use.\n * @memberof PIXI.particles\n * @class ParticleUtils\n * @static\n */\nvar ParticleUtils = {\n    /**\n     * If errors and warnings should be logged within the library.\n     * @name PIXI.particles.ParticleUtils.verbose\n     * @default false\n     * @static\n     */\n    verbose: false,\n    DEG_TO_RADS: Math.PI / 180,\n    /**\n     * Gets random number between two numbers (inclusive)\n     * @param {Number} minimum number to return\n     * @param {Number} maximum number to return\n     */\n    getRandomInt: function (min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n    /**\n     * Rotates a point by a given angle.\n     * @method PIXI.particles.ParticleUtils.rotatePoint\n     * @param {Number} angle The angle to rotate by in degrees\n     * @param {PIXI.Point} p The point to rotate around 0,0.\n     * @static\n     */\n    rotatePoint: function (angle, p) {\n        if (!angle)\n            return;\n        angle *= ParticleUtils.DEG_TO_RADS;\n        var s = Math.sin(angle);\n        var c = Math.cos(angle);\n        var xnew = p.x * c - p.y * s;\n        var ynew = p.x * s + p.y * c;\n        p.x = xnew;\n        p.y = ynew;\n    },\n    /**\n     * Combines separate color components (0-255) into a single uint color.\n     * @method PIXI.particles.ParticleUtils.combineRGBComponents\n     * @param {uint} r The red value of the color\n     * @param {uint} g The green value of the color\n     * @param {uint} b The blue value of the color\n     * @return {uint} The color in the form of 0xRRGGBB\n     * @static\n     */\n    combineRGBComponents: function (r, g, b /*, a*/) {\n        return /*a << 24 |*/ r << 16 | g << 8 | b;\n    },\n    /**\n     * Reduces the point to a length of 1.\n     * @method PIXI.particles.ParticleUtils.normalize\n     * @static\n     * @param {PIXI.Point} point The point to normalize\n     */\n    normalize: function (point) {\n        var oneOverLen = 1 / ParticleUtils.length(point);\n        point.x *= oneOverLen;\n        point.y *= oneOverLen;\n    },\n    /**\n     * Multiplies the x and y values of this point by a value.\n     * @method PIXI.particles.ParticleUtils.scaleBy\n     * @static\n     * @param {PIXI.Point} point The point to scaleBy\n     * @param {number} value The value to scale by.\n     */\n    scaleBy: function (point, value) {\n        point.x *= value;\n        point.y *= value;\n    },\n    /**\n     * Returns the length (or magnitude) of this point.\n     * @method PIXI.particles.ParticleUtils.length\n     * @static\n     * @param {PIXI.Point} point The point to measure length\n     * @return The length of this point.\n     */\n    length: function (point) {\n        return Math.sqrt(point.x * point.x + point.y * point.y);\n    },\n    /**\n     * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\n     * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\n     * {r, g, b, (a)}.\n     * @method PIXI.particles.ParticleUtils.hexToRGB\n     * @param {string} color The input color string.\n     * @param {Object} [output] An object to put the output in. If omitted, a new object is created.\n     * @return The object with r, g, and b properties, possibly with an a property.\n     * @static\n     */\n    hexToRGB: function (color, output) {\n        if (!output)\n            output = {};\n        if (color.charAt(0) == \"#\")\n            color = color.substr(1);\n        else if (color.indexOf(\"0x\") === 0)\n            color = color.substr(2);\n        var alpha;\n        if (color.length == 8) {\n            alpha = color.substr(0, 2);\n            color = color.substr(2);\n        }\n        output.r = parseInt(color.substr(0, 2), 16); //Red\n        output.g = parseInt(color.substr(2, 2), 16); //Green\n        output.b = parseInt(color.substr(4, 2), 16); //Blue\n        if (alpha)\n            output.a = parseInt(alpha, 16);\n        return output;\n    },\n    /**\n     * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\n     * by the related tool at http://www.greensock.com/customease/.\n     * @method PIXI.particles.ParticleUtils.generateEase\n     * @param {Array} segments An array of segments, as created by\n     * http://www.greensock.com/customease/.\n     * @return {Function} A function that calculates the percentage of change at\n     *                    a given point in time (0-1 inclusive).\n     * @static\n     */\n    generateEase: function (segments) {\n        var qty = segments.length;\n        var oneOverQty = 1 / qty;\n        /*\n         * Calculates the percentage of change at a given point in time (0-1 inclusive).\n         * @param {Number} time The time of the ease, 0-1 inclusive.\n         * @return {Number} The percentage of the change, 0-1 inclusive (unless your\n         *                  ease goes outside those bounds).\n         */\n        return function (time) {\n            var t, s;\n            var i = (qty * time) | 0; //do a quick floor operation\n            t = (time - (i * oneOverQty)) * qty;\n            s = segments[i] || segments[qty - 1];\n            return (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\n        };\n    },\n    /**\n     * Gets a blend mode, ensuring that it is valid.\n     * @method PIXI.particles.ParticleUtils.getBlendMode\n     * @param {string} name The name of the blend mode to get.\n     * @return {int} The blend mode as specified in the PIXI.BLEND_MODES enumeration.\n     * @static\n     */\n    getBlendMode: function (name) {\n        if (!name)\n            return BLEND_MODES.NORMAL;\n        name = name.toUpperCase();\n        while (name.indexOf(\" \") >= 0)\n            name = name.replace(\" \", \"_\");\n        return BLEND_MODES[name] || BLEND_MODES.NORMAL;\n    },\n    /**\n     * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\n     * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\n     * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\n     * @method PIXI.particles.ParticleUtils.createSteppedGradient\n     * @param {Array} list The list of data to convert.\n     * @param {number} [numSteps=10] The number of steps to use.\n     * @return {PIXI.particles.PropertyNode} The blend mode as specified in the PIXI.blendModes enumeration.\n     * @static\n     */\n    createSteppedGradient: function (list, numSteps) {\n        if (numSteps === void 0) { numSteps = 10; }\n        if (typeof numSteps !== 'number' || numSteps <= 0)\n            numSteps = 10;\n        var first = new PropertyNode_1.default(list[0].value, list[0].time);\n        first.isStepped = true;\n        var currentNode = first;\n        var current = list[0];\n        var nextIndex = 1;\n        var next = list[nextIndex];\n        for (var i = 1; i < numSteps; ++i) {\n            var lerp = i / numSteps;\n            //ensure we are on the right segment, if multiple\n            while (lerp > next.time) {\n                current = next;\n                next = list[++nextIndex];\n            }\n            //convert the lerp value to the segment range\n            lerp = (lerp - current.time) / (next.time - current.time);\n            var curVal = ParticleUtils.hexToRGB(current.value);\n            var nextVal = ParticleUtils.hexToRGB(next.value);\n            var output = {};\n            output.r = (nextVal.r - curVal.r) * lerp + curVal.r;\n            output.g = (nextVal.g - curVal.g) * lerp + curVal.g;\n            output.b = (nextVal.b - curVal.b) * lerp + curVal.b;\n            currentNode.next = new PropertyNode_1.default(output, i / numSteps);\n            currentNode = currentNode.next;\n        }\n        //we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\n        //the particle has died of old age\n        return first;\n    }\n};\nexports.default = ParticleUtils;\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\nvar Particle_1 = require(\"./Particle\");\n/**\n * A helper point for math things.\n * @private\n */\nvar helperPoint = new PIXI.Point();\n//a hand picked list of Math functions (and a couple properties) that are allowable.\n//they should be used without the preceding \"Math.\"\nvar MATH_FUNCS = [\n    \"pow\",\n    \"sqrt\",\n    \"abs\",\n    \"floor\",\n    \"round\",\n    \"ceil\",\n    \"E\",\n    \"PI\",\n    \"sin\",\n    \"cos\",\n    \"tan\",\n    \"asin\",\n    \"acos\",\n    \"atan\",\n    \"atan2\",\n    \"log\"\n];\n//create an actual regular expression object from the string\nvar WHITELISTER = new RegExp([\n    //Allow the 4 basic operations, parentheses and all numbers/decimals, as well\n    //as 'x', for the variable usage.\n    \"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\n].concat(MATH_FUNCS).join(\"|\"), \"g\");\n/**\n * Parses a string into a function for path following.\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\n * names, and using `new Function()` to generate a function.\n * @method PIXI.particles.PathParticle~parsePath\n * @private\n * @static\n * @param {String} pathString The string to parse.\n * @return {Function} The path function - takes x, outputs y.\n */\nexports.parsePath = function (pathString) {\n    var matches = pathString.match(WHITELISTER);\n    for (var i = matches.length - 1; i >= 0; --i) {\n        if (MATH_FUNCS.indexOf(matches[i]) >= 0)\n            matches[i] = \"Math.\" + matches[i];\n    }\n    pathString = matches.join(\"\");\n    return new Function(\"x\", \"return \" + pathString + \";\");\n};\n/**\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\n * \"5x + 3\".\n * To use this class, the particle config must have a \"path\" string in the\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\n * speed settings of the particle). It may have numbers, parentheses, the four basic\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\n * \"acos\", \"atan\", \"atan2\", \"log\".\n * The overall movement of the particle and the expression value become x and y positions for\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\n * the particle.\n *\n * Some example paths:\n *\n * \t\"sin(x/10) * 20\" // A sine wave path.\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\n *\n * @memberof PIXI.particles\n * @class PathParticle\n * @extends PIXI.particles.Particle\n * @constructor\n * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\n */\nvar PathParticle = /** @class */ (function (_super) {\n    __extends(PathParticle, _super);\n    /**\n     * Used so the static position doesn't change every update.\n     * @property {boolean} staticSet\n     */\n    function PathParticle(emitter) {\n        var _this = _super.call(this, emitter) || this;\n        _this.path = null;\n        _this.initialRotation = 0;\n        _this.initialPosition = new PIXI.Point();\n        _this.movement = 0;\n        _this.isStatic = false;\n        _this.staticSet = false;\n        _this.min_x = null;\n        _this.max_x = null;\n        return _this;\n    }\n    /**\n     * Initializes the particle for use, based on the properties that have to\n     * have been set already on the particle.\n     * @method PIXI.particles.PathParticle#init\n     */\n    PathParticle.prototype.init = function () {\n        //get initial rotation before it is converted to radians\n        this.initialRotation = this.rotation;\n        //standard init\n        this.Particle_init();\n        //set the path for the particle\n        this.path = this.extraData.path;\n        // set if the path is static\n        this.isStatic = this.extraData.isStatic;\n        // set static set to false upon initialization\n        this.staticSet = false;\n        this.min_x = this.isStatic ? this.extraData.min_x : null;\n        this.max_x = this.isStatic ? this.extraData.max_x : null;\n        //cancel the normal movement behavior\n        this._doNormalMovement = !this.path;\n        //reset movement\n        this.movement = 0;\n        //grab position\n        this.initialPosition.x = this.position.x;\n        this.initialPosition.y = this.position.y;\n    };\n    /**\n     * Updates the particle.\n     * @method PIXI.particles.PathParticle#update\n     * @param {Number} delta Time elapsed since the previous frame, in __seconds__.\n     */\n    PathParticle.prototype.update = function (delta) {\n        var lerp = this.Particle_update(delta);\n        //if the particle died during the update, then don't bother\n        if (lerp >= 0 && this.path) {\n            if (this.isStatic) {\n                if (!this.staticSet) {\n                    // get movement based on random position\n                    this.movement = ParticleUtils_1.default.getRandomInt(this.min_x, this.max_x);\n                    // set normal movement back to true so particles can continue behavior after static path positions been set\n                    this.staticSet = true;\n                }\n                else {\n                    this._doNormalMovement = true;\n                    helperPoint.x = this.movement;\n                    helperPoint.y = this.path(this.movement);\n                    ParticleUtils_1.default.rotatePoint(this.initialRotation, helperPoint);\n                    return lerp;\n                }\n            }\n            else {\n                //increase linear movement based on speed\n                var speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n                this.movement += speed * delta;\n            }\n            //set up the helper point for rotation\n            helperPoint.x = this.movement;\n            helperPoint.y = this.path(this.movement);\n            ParticleUtils_1.default.rotatePoint(this.initialRotation, helperPoint);\n            this.position.x = this.initialPosition.x + helperPoint.x;\n            this.position.y = this.initialPosition.y + helperPoint.y;\n        }\n        return lerp;\n    };\n    /**\n     * Destroys the particle, removing references and preventing future use.\n     * @method PIXI.particles.PathParticle#destroy\n     */\n    PathParticle.prototype.destroy = function () {\n        this.Particle_destroy();\n        this.path = this.initialPosition = null;\n    };\n    /**\n     * Checks over the art that was passed to the Emitter's init() function, to do any special\n     * modifications to prepare it ahead of time. This just runs Particle.parseArt().\n     * @method PIXI.particles.PathParticle.parseArt\n     * @static\n     * @param  {Array} art The array of art data. For Particle, it should be an array of Textures.\n     *                     Any strings in the array will be converted to Textures via\n     *                     Texture.fromImage().\n     * @return {Array} The art, after any needed modifications.\n     */\n    PathParticle.parseArt = function (art) {\n        return Particle_1.default.parseArt(art);\n    };\n    /**\n     * Parses extra emitter data to ensure it is set up for this particle class.\n     * PathParticle checks for the existence of path data, and parses the path data for use\n     * by particle instances.\n     * @method PIXI.particles.PathParticle.parseData\n     * @static\n     * @param  {Object} extraData The extra data from the particle config.\n     * @return {Object} The parsed extra data.\n     */\n    PathParticle.parseData = function (extraData) {\n        var output = {};\n        output.isStatic = false;\n        if (extraData && extraData.path) {\n            try {\n                output.path = exports.parsePath(extraData.path);\n                if (extraData.isStatic) {\n                    output.isStatic = true;\n                    output.min_x = extraData.min_x;\n                    output.max_x = extraData.max_x;\n                }\n            }\n            catch (e) {\n                if (ParticleUtils_1.default.verbose)\n                    console.error(\"PathParticle: error in parsing path expression\");\n                output.path = null;\n            }\n        }\n        else {\n            if (ParticleUtils_1.default.verbose)\n                console.error(\"PathParticle requires a path string in extraData!\");\n            output.path = null;\n        }\n        return output;\n    };\n    return PathParticle;\n}(Particle_1.default));\nexports.default = PathParticle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\n/**\n * Singly linked list container for keeping track of interpolated properties for particles.\n * Each Particle will have one of these for each interpolated property.\n * @memberof PIXI.particles\n * @class PropertyList\n * @constructor\n * @param {boolean} isColor If this list handles color values\n */\nvar PropertyList = /** @class */ (function () {\n    function PropertyList(isColor) {\n        if (isColor === void 0) { isColor = false; }\n        this.current = null;\n        this.next = null;\n        this.isColor = !!isColor;\n        this.interpolate = null;\n        this.ease = null;\n    }\n    /**\n     * Resets the list for use.\n     * @method interpolate\n     * @param {PIXI.particles.PropertyNode} first The first node in the list.\n     * @param {boolean} [isStepped=false] If the values should be stepped instead of interpolated linearly.\n     */\n    PropertyList.prototype.reset = function (first) {\n        this.current = first;\n        this.next = first.next;\n        var isSimple = this.next && this.next.time >= 1;\n        if (isSimple) {\n            this.interpolate = this.isColor ? intColorSimple : intValueSimple;\n        }\n        else if (first.isStepped) {\n            this.interpolate = this.isColor ? intColorStepped : intValueStepped;\n        }\n        else {\n            this.interpolate = this.isColor ? intColorComplex : intValueComplex;\n        }\n        this.ease = this.current.ease;\n    };\n    return PropertyList;\n}());\nexports.default = PropertyList;\nfunction intValueSimple(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    return (this.next.value - this.current.value) * lerp + this.current.value;\n}\nfunction intColorSimple(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    var curVal = this.current.value, nextVal = this.next.value;\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\n    return ParticleUtils_1.default.combineRGBComponents(r, g, b);\n}\nfunction intValueComplex(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    //make sure we are on the right segment\n    while (lerp > this.next.time) {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    //convert the lerp value to the segment range\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n    return (this.next.value - this.current.value) * lerp + this.current.value;\n}\nfunction intColorComplex(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    //make sure we are on the right segment\n    while (lerp > this.next.time) {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    //convert the lerp value to the segment range\n    lerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n    var curVal = this.current.value, nextVal = this.next.value;\n    var r = (nextVal.r - curVal.r) * lerp + curVal.r;\n    var g = (nextVal.g - curVal.g) * lerp + curVal.g;\n    var b = (nextVal.b - curVal.b) * lerp + curVal.b;\n    return ParticleUtils_1.default.combineRGBComponents(r, g, b);\n}\nfunction intValueStepped(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    //make sure we are on the right segment\n    while (this.next && lerp > this.next.time) {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    return this.current.value;\n}\nfunction intColorStepped(lerp) {\n    if (this.ease)\n        lerp = this.ease(lerp);\n    //make sure we are on the right segment\n    while (this.next && lerp > this.next.time) {\n        this.current = this.next;\n        this.next = this.next.next;\n    }\n    var curVal = this.current.value;\n    return ParticleUtils_1.default.combineRGBComponents(curVal.r, curVal.g, curVal.b);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_1 = require(\"./ParticleUtils\");\n/**\n * A single node in a PropertyList.\n * @memberof PIXI.particles\n * @class PropertyNode\n * @constructor\n * @param {number|string} value The value for this node\n * @param {number} time The time for this node, between 0-1\n * @param {Function|Array} [ease] Custom ease for this list. Only relevant for the first node.\n */\nvar PropertyNode = /** @class */ (function () {\n    function PropertyNode(value, time, ease) {\n        this.value = typeof value == \"string\" ? ParticleUtils_1.default.hexToRGB(value) : value;\n        this.time = time;\n        this.next = null;\n        this.isStepped = false;\n        if (ease) {\n            this.ease = typeof ease == \"function\" ? ease : ParticleUtils_1.default.generateEase(ease);\n        }\n        else {\n            this.ease = null;\n        }\n    }\n    /**\n     * Creates a list of property values from a data object {list, isStepped} with a list of objects in\n     * the form {value, time}. Alternatively, the data object can be in the deprecated form of\n     * {start, end}.\n     * @method PIXI.particles.PropertyNode.createListFromArray\n     * @static\n     * @param  {Object} data The data for the list.\n     * @param  {Array} data.list The array of value and time objects.\n     * @param  {boolean} [data.isStepped] If the list is stepped rather than interpolated.\n     * @param  {Function|Array} [data.ease] Custom ease for this list.\n     * @return {PIXI.particles.PropertyNode} The first node in the list\n     */\n    PropertyNode.createList = function (data) {\n        if (Array.isArray(data.list)) {\n            var array = data.list;\n            var node = void 0, first = void 0;\n            first = node = new PropertyNode(array[0].value, array[0].time, data.ease);\n            //only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\n            if (array.length > 2 || (array.length === 2 && array[1].value !== array[0].value)) {\n                for (var i = 1; i < array.length; ++i) {\n                    node.next = new PropertyNode(array[i].value, array[i].time);\n                    node = node.next;\n                }\n            }\n            first.isStepped = !!data.isStepped;\n            return first;\n        }\n        else {\n            //Handle deprecated version here\n            var start = new PropertyNode(data.start, 0);\n            //only set up a next value if it is different from the starting value\n            if (data.end !== data.start)\n                start.next = new PropertyNode(data.end, 1);\n            return start;\n        }\n    };\n    return PropertyNode;\n}());\nexports.default = PropertyNode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ParticleUtils_js_1 = require(\"./ParticleUtils.js\");\nexports.ParticleUtils = ParticleUtils_js_1.default;\nvar Particle_js_1 = require(\"./Particle.js\");\nexports.Particle = Particle_js_1.default;\nvar Emitter_js_1 = require(\"./Emitter.js\");\nexports.Emitter = Emitter_js_1.default;\nvar PathParticle_js_1 = require(\"./PathParticle.js\");\nexports.PathParticle = PathParticle_js_1.default;\nvar AnimatedParticle_js_1 = require(\"./AnimatedParticle.js\");\nexports.AnimatedParticle = AnimatedParticle_js_1.default;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// If we're in the browser make sure PIXI is available\nif (typeof PIXI === 'undefined') {\n    throw \"pixi-particles requires pixi.js to be loaded first\";\n}\n//ensure that the particles namespace exist - PIXI 4 creates it itself, PIXI 3 does not\nif (!PIXI.particles) {\n    PIXI.particles = {};\n}\n// get the library itself\nvar particles = require(\"./particles\");\n// insert the library into the particles namespace on PIXI\nfor (var prop in particles) {\n    PIXI.particles[prop] = particles[prop];\n}\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = particles;\n}\n"],"sourceRoot":"."}